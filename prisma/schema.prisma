generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String        @db.Text
  email         String        @unique
  emailVerified Boolean       @default(false)
  image         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  accounts      Account[]
  galeriaLogs   LogGaleria[]
  logs          LogMensagem[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Mensagem {
  id        String        @id @default(uuid())
  nome      String        @db.Text
  email     String        @db.Text
  telefone  String        @db.Text
  endereco  String        @db.Text
  titulo    String        @db.Text
  descricao String        @db.Text
  conteudo  String        @db.Text
  status    String        @default("NÃ£o Lida")
  oculta    Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  logs      LogMensagem[]

  @@map("mensagens")
}

model LogMensagem {
  id            String   @id @default(uuid())
  mensagemId    String
  userId        String
  acao          String   @db.Text
  valorAnterior String?  @db.Text
  valorNovo     String?  @db.Text
  createdAt     DateTime @default(now())
  mensagem      Mensagem @relation(fields: [mensagemId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([mensagemId], map: "log_mensagem_mensagemId_fkey")
  @@index([userId], map: "log_mensagem_userId_fkey")
  @@map("log_mensagem")
}

model LogGaleria {
  id            String   @id @default(uuid())
  galeriaId     String
  userId        String
  acao          String   @db.Text
  valorAnterior String?  @db.Text
  valorNovo     String?  @db.Text
  createdAt     DateTime @default(now())
  galeria       galeria  @relation(fields: [galeriaId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([galeriaId], map: "log_galeria_galeriaId_fkey")
  @@index([userId], map: "log_galeria_userId_fkey")
  @@map("log_galeria")
}

model galeria {
  id        String       @id
  url       String       @db.Text
  categoria String       @db.Text
  oculta    Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  logs      LogGaleria[]
}
